From ee8d0c7e5a5c9f80fe83bceb86309b375e0dc356 Mon Sep 17 00:00:00 2001
From: ymdzq <233900743@qq.com>
Date: Sat, 26 Aug 2023 15:22:35 +0800
Subject: [PATCH] 添加Kernel-SU支持，抄的Realking内核

https://github.com/Rohail33/Realking_kernel_sm8250/commit/51c32c301e767ead3559e37894a58ff0f89139d1
https://github.com/Rohail33/Realking_kernel_sm8250/commit/5babec5dc35cee6cfe62f868cb24b57b82f93dae
---
 drivers/input/input.c | 2 ++
 fs/exec.c             | 3 +++
 fs/open.c             | 4 +++-
 fs/read_write.c       | 3 +++
 fs/stat.c             | 2 ++
 5 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 159dd87..dd8b2bf 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -378,10 +378,12 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
+        ksu_handle_input_handle_event(&type, &code, &value);
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
diff --git a/fs/exec.c b/fs/exec.c
index 97c807b..a34d405 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1745,11 +1745,14 @@ static int exec_binprm(struct linux_binprm *bprm)
 /*
  * sys_execve() executes a new program.
  */
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
 static int __do_execve_file(int fd, struct filename *filename,
 			    struct user_arg_ptr argv,
 			    struct user_arg_ptr envp,
 			    int flags, struct file *file)
 {
+        ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
 	char *pathbuf = NULL;
 	struct linux_binprm *bprm;
 	struct files_struct *displaced;
diff --git a/fs/open.c b/fs/open.c
index 05036d8..762a085 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -347,7 +347,8 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 {
 	return ksys_fallocate(fd, mode, offset, len);
 }
-
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -362,6 +363,7 @@ long do_faccessat(int dfd, const char __user *filename, int mode)
 	struct vfsmount *mnt;
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
+        ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
diff --git a/fs/read_write.c b/fs/read_write.c
index 650fc7e..e80b744 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -434,9 +434,12 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
+        ksu_handle_vfs_read(&file, &buf, &count, &pos);
 
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
diff --git a/fs/stat.c b/fs/stat.c
index 3765431..d4751bd 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,6 +148,7 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -169,6 +170,7 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	struct path path;
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
+        ksu_handle_stat(&dfd, &filename, &flags);
 
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
--
libgit2 1.7.1

